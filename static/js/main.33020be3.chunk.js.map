{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","heading","minutes","seconds","handleIncrement","bind","handleDecrement","handleSS","countDown","changeColor","handleReset","setInterval","this","document","getElementById","style","opacity","e","target","id","Switch","setState","color","play","display","pause","currentTime","className","onClick","toString","padStart","preload","src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.33020be3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      'break-length': 5,\n      'session-length': 25,\n       heading: 'Session',\n      'Switch': false,\n       minutes: 25,\n       seconds: 0,\n       'play-button': 'START',\n    }\n    this.handleIncrement = this.handleIncrement.bind(this);\n    this.handleDecrement = this.handleDecrement.bind(this);\n    this.handleSS = this.handleSS.bind(this);\n    this.countDown = this.countDown.bind(this);\n    this.changeColor = this.changeColor.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n\n  // After render, will check every 1s to see if Switch is activated to activate \n  // the equations below. Countdown might be slightly out of sync but it's unnoticeable\n  componentDidMount(){\n    setInterval(this.countDown, 1000);\n    setInterval(this.changeColor, 1000);\n    setInterval(document.getElementById('session').style.opacity = 100, 2000);\n    setInterval(document.getElementById('break').style.opacity = 100, 2000);\n    setInterval(document.getElementById('display-wrapper').style.opacity = 100, 2000);\n  }\n\n  //Increases break or session length by one with each click\n  handleIncrement(e){\n    let target = e.target.id;\n\n    if(this.state.Switch === false){\n      if (target === 'break-increment' && this.state['break-length'] < 60){\n        this.setState({'break-length': this.state['break-length'] + 1})\n      }\n      if (target === 'session-increment' && this.state['session-length'] < 60){\n        this.setState({\n          'session-length': this.state['session-length'] + 1,\n          'minutes': this.state['session-length'] + 1,\n        });\n      }\n\n      this.setState({seconds:0});\n      document.getElementById('color-wrapper').style.color = '#E0AAFF';\n    }\n  }\n\n  //Decreases break or session length by one with each click\n  handleDecrement(e){\n    let target = e.target.id;\n\n    if(this.state.Switch === false){\n      target === 'break-decrement' && this.state['break-length'] > 1 ?\n        this.setState({'break-length': this.state['break-length'] - 1}) :\n      target === 'session-decrement' && this.state['session-length'] > 1 ?\n        this.setState({\n          'session-length': this.state['session-length'] - 1,\n          'minutes': this.state['session-length'] - 1,\n        }):\n      target !== 'break-decrement' ?\n        this.setState({'minutes': 1}):\n        this.setState({'break-length': 1});\n\n      this.setState({seconds:0});\n      document.getElementById('color-wrapper').style.color = '#E0AAFF';\n    }\n  }\n\n  // Handles the start stop switch for the session timer\n  handleSS(e){\n    if (this.state.Switch === false) {\n      this.setState({\n        Switch: true,\n        'play-button':'STOP'\n      })\n    } else{\n      this.setState({\n        Switch: false,\n        'play-button':'START'\n      });\n    }\n      \n    }\n\n  // Used in componentDidMount above for counting down the time for session and break times\n  countDown(){\n    let seconds = this.state.seconds;\n    let minutes = this.state.minutes;\n\n    if (this.state.Switch === true){\n      if (seconds !== 0){\n        this.setState({seconds: seconds - 1})\n      } else if (minutes !== 0){\n        this.setState({\n          minutes: minutes - 1,\n          seconds: 59,\n        });\n      } else if (this.state.heading === 'Session'){\n        document.getElementById('beep').play();\n        this.setState({\n          heading: 'Break',\n          minutes: this.state['break-length'],\n      });\n        \n      } else {\n        document.getElementById('beep').play();\n        this.setState({\n          heading: 'Session',\n          minutes: this.state['session-length'],\n        });\n        \n      }\n\n    }\n  }\n\n  // Changes color upon timer dropping below 1 minute\n  changeColor(){\n    let seconds = this.state.seconds;\n    let minutes = this.state.minutes;\n    let display = document.getElementById('color-wrapper');\n\n    if(this.state.Switch === true){\n      minutes === 0 && seconds < 60?\n        display.style.color = 'red':\n        display.style.color = '#E0AAFF';\n      \n    }\n  }\n\n  handleReset(){\n    this.setState({\n      Switch: false, \n      minutes: 25,\n      seconds: 0,\n      'session-length': 25,\n      'break-length': 5,\n      heading: 'Session',\n      'play-button':'START'\n    });\n    document.getElementById('color-wrapper').style.color = '#E0AAFF';\n    document.getElementById('beep').pause();\n    document.getElementById('beep').currentTime = 0;\n  }\n\n  render(){\n    return (\n    <div className=\"App\">\n    <h1 id = 'title'>Pomodoro Clock</h1>\n      <div id = 'clock-wrapper'>\n        <div id = 'session' className = 'controls'>\n          <div className = 'circle-wrapper'>\n            <h2 id = 'session-label'>Session Length</h2>\n            <div className = 'time-control-wrapper'>\n              <i className=\"gg-arrow-down\" id = 'session-decrement' onClick = {this.handleDecrement}></i>\n              <h2 id = 'session-length'>{this.state['session-length']}</h2>\n              <i className=\"gg-arrow-up\" id = 'session-increment' onClick = {this.handleIncrement}></i>\n            </div>\n          </div>\n        </div>\n\n        <div id = 'display-wrapper'>\n          <div id = 'color-wrapper'>\n            <h2 id = 'timer-label'>{this.state.heading}</h2>\n            <h1 id = 'time-left'>{this.state['minutes'].toString().padStart(2,'0') + ':' + this.state.seconds.toString().padStart(2,'0')}</h1>\n          </div>\n          <div id = 'control-wrapper'>\n            <button id = 'start_stop' onClick = {this.handleSS}>{this.state['play-button']}</button>\n            <button id = 'reset' onClick = {this.handleReset}>RESET</button>\n          </div>\n        </div>\n\n        <div id = 'break' className = 'controls'>\n          <div className = 'circle-wrapper'>\n            <h2 id = 'break-label'>Break Length</h2>\n            <div className = 'time-control-wrapper'>\n              <i className=\"gg-arrow-down\" id = 'break-decrement' onClick = {this.handleDecrement}></i>\n              <h2 id = 'break-length'>{this.state['break-length']}</h2>\n              <i className=\"gg-arrow-up\" id = 'break-increment' onClick = {this.handleIncrement}></i>\n          </div>\n            </div>\n        </div>\n      </div>\n\n      <audio\n          id=\"beep\"\n          preload=\"auto\"\n          src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n        />\n\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}